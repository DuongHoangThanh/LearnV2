//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: huhu
      ///
      /// Key: Bye
      ///
      /// Locales: en, fr, vi
      var bye: RswiftResources.StringResource { .init(key: "Bye", tableName: "Localizable", source: source, developmentValue: "huhu", comment: nil) }

      /// en translation: hehe
      ///
      /// Key: Hello
      ///
      /// Locales: en, fr, vi
      var hello: RswiftResources.StringResource { .init(key: "Hello", tableName: "Localizable", source: source, developmentValue: "hehe", comment: nil) }

      /// en translation: Are you sure you want to delete your account? This will permanently erase your account
      ///
      /// Key: account.Are you sure you want to delete your accountThis will permanently erase your account
      ///
      /// Locales: en, fr, vi
      var accountAreYouSureYouWantToDeleteYourAccountThisWillPermanentlyEraseYourAccount: RswiftResources.StringResource { .init(key: "account.Are you sure you want to delete your accountThis will permanently erase your account", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to delete your account? This will permanently erase your account", comment: nil) }

      /// en translation: Change Language
      ///
      /// Key: change_language
      ///
      /// Locales: en, fr, vi
      var change_language: RswiftResources.StringResource { .init(key: "change_language", tableName: "Localizable", source: source, developmentValue: "Change Language", comment: nil) }

      /// en translation: Dark Mode
      ///
      /// Key: dark_mode
      ///
      /// Locales: en, fr, vi
      var dark_mode: RswiftResources.StringResource { .init(key: "dark_mode", tableName: "Localizable", source: source, developmentValue: "Dark Mode", comment: nil) }

      /// en translation: Title
      ///
      /// Key: home.title
      ///
      /// Locales: en, fr, vi
      var homeTitle: RswiftResources.StringResource { .init(key: "home.title", tableName: "Localizable", source: source, developmentValue: "Title", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: settings_title
      ///
      /// Locales: en, fr, vi
      var settings_title: RswiftResources.StringResource { .init(key: "settings_title", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Background`.
    var background: RswiftResources.ColorResource { .init(name: "Background", path: [], bundle: bundle) }

    /// Color `Text`.
    var text: RswiftResources.ColorResource { .init(name: "Text", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `MainViewController`.
    var mainViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MainViewController", bundle: bundle) }

    /// Nib `SecondViewController`.
    var secondViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SecondViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIColor(named: "Background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Background' is used in nib 'MainViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Text' is used in nib 'MainViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Background' is used in nib 'SecondViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Text' is used in nib 'SecondViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}